// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  // LEARNER
  SUPER_ADMIN
}

enum VerificationType {
  EMAIL
  RESET
}

enum PaymentStatus {
  PAID
  PARTIAL
  PENDING
}

model Admin {
  id         String   @id @default(uuid())
  firstName  String
  lastName   String
  email      String   @unique
  password   String
  role       Role     @default(ADMIN)
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  verificationTokens VerificationToken[] // one-to-many
}

model Learner {
  id             String    @id @default(uuid())
  firstName      String
  lastName       String
  email          String    @unique
  password       String
  enrolledTrack  Track?    @relation(fields: [trackId], references: [id])
  trackId        String?
  enrolledCourse Course?   @relation(fields: [courseId], references: [id])
  courseId       String?
  // paymentStatus  PaymentStatus @default(PENDING)
  invoices       Invoice[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model VerificationToken {
  id        String           @id @default(uuid())
  type      VerificationType
  token     String           @unique
  adminId   String
  admin     Admin            @relation(fields: [adminId], references: [id], onDelete: Cascade)
  createdAt DateTime         @default(now())
  expiresAt DateTime
  usedAt    DateTime? //null= not used

  @@index([adminId, createdAt], name: "idx_verification_user_created")
}

model Track {
  id          String    @id @default(uuid())
  name        String    @unique
  price       Decimal   @db.Decimal(10, 2)
  duration    Int //in weeks
  instructor  String
  description String?
  image       String?
  courses     Course[]
  learners    Learner[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Course {
  id          String    @id @default(uuid())
  title       String
  description String?
  image       String
  track       Track?    @relation(fields: [trackId], references: [id])
  trackId     String
  learner     Learner[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([trackId])
}

model Invoice {
  id         String        @id @default(uuid())
  learner    Learner       @relation(fields: [learnerId], references: [id])
  learnerId  String
  amountPaid Float
  status     PaymentStatus @default(PENDING)
  // dueAmount  Float
  dueDate    DateTime?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  @@index([learnerId])
}
